from fastapi import FastAPI, HTTPException
from typing import List, Optional
from datetime import datetime
from pydantic import BaseModel, validator, Field

app = FastAPI()

class Order(BaseModel):
    id: int
    name: str= Field(..., description="–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É")
    price: float= Field(..., description="–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É")
    amount: int= Field(..., description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

    @validator("price")
    def validate_price(cls, value):
        if value <= 0:
            raise ValueError('–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥`—î–º–Ω–æ—é')
        return value

    @validator("amount")
    def validate_amount(cls, value):
        if value <= 0:
            raise ValueError('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥`—î–º–Ω–æ—é')
        return value

class User(BaseModel):
    id: int
    name: str= Field(..., description="–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    email: str= Field(..., description="–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    list_of_orders: List[Order] = Field(..., description="–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

    @validator("email")
    def validate_email(cls, value):
        if '@' not in value:
            raise ValueError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞')
        return value

users=[]

@app.post("/users/")
def create_user(user: User):
    user.id = len(users) + 1
    for order in user.list_of_orders:
        order.id = len(users) + 1
    users.append(user)
    return user

@app.get("/users/")
def get_users(email: Optional[str] = None):
    if email:
        for user in users:
            if user.email == email:
                return user
        raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüò•")
    return users
