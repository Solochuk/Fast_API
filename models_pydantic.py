from fastapi import FastAPI, HTTPException, Path
from pydantic import BaseModel, validator, Field
from datetime import date
from typing import List

app = FastAPI()

class Movie(BaseModel):
    id: int
    title: str = Field(..., description="–ù–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É")
    director: str = Field(..., description="–†–µ–∂–∏—Å–µ—Ä —Ñ—ñ–ª—å–º—É")
    release_year: int = Field(..., description="–†—ñ–∫ –≤–∏–ø—É—Å–∫—É —Ñ—ñ–ª—å–º—É")
    rating: float = Field(..., ge=0, le=10, description="–†–µ–π—Ç–∏–Ω–≥ —Ñ—ñ–ª—å–º—É")

    @validator("release_year")
    def validate_release(value):
        current_year = date.today().year
        if value > current_year:
            raise ValueError('–†—ñ–∫ –≤–∏–ø—É—Å–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É')
        return value

movies = [{
  "id": 1,
  "title": "string",
  "director": "string",
  "release_year": 2024,
  "rating": 10
}]

@app.get('/movies', response_model=List[Movie])
async def get_movies():
    return movies

@app.post('/movies', response_model=Movie)
async def add_movie(movie:Movie):
    movie.id = len(movies)+1
    movies.append(movie)
    return movie

@app.get('/movies{id}', response_model=Movie)
async def get_movie(id: int = Path(..., description="ID —Ñ—ñ–ª—å–º—É")):
    for movie in movies:
        if movie['id'] == id:
            return movie
        else:
            raise HTTPException(status_code=404, detail="–§–Ü–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüò•")

@app.delete('/movies{id}')
async def delet_movie(id: int = Path(..., description="ID —Ñ—ñ–ª—å–º—É")):
    for movie in movies:
        if movie['id'] == id:
            movies.remove(movie)
            return {'message': '–§–Ü–ª—å–º –≤–∏–¥–∞–ª–µ–Ω–æ'}
        else:
            raise HTTPException(status_code=404, detail="–§–Ü–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüò•")
